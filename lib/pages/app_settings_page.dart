import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:truecircle/pages/contact_list_page.dart';
import 'package:truecircle/services/app_mode_service.dart';
import 'package:truecircle/widgets/global_navigation_bar.dart';
import 'package:truecircle/widgets/truecircle_logo.dart';

class AppSettingsPage extends StatefulWidget {
  const AppSettingsPage({super.key});

  @override
  State<AppSettingsPage> createState() => _AppSettingsPageState();
}

class _AppSettingsPageState extends State<AppSettingsPage> {
  bool _isFullMode = false;

  @override
  void initState() {
    super.initState();
    _loadMode();
  }

  Future<void> _loadMode() async {
    final isFull = await AppModeService.isFullMode();
    if (!mounted) return;
    setState(() {
      _isFullMode = isFull;
    });
  }

  Future<void> _toggleFullMode(bool value) async {
    if (!mounted) return;

    if (value) {
      await _showSampleModeRestrictionDialog();
      await AppModeService.setFullMode(false);
      setState(() => _isFullMode = false);
      return;
    }

    await AppModeService.setFullMode(false);
    setState(() => _isFullMode = false);
  }

  Future<void> _showSampleModeRestrictionDialog() {
    final isHindi =
        Localizations.localeOf(context).languageCode.startsWith('hi');
    return showDialog<void>(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(isHindi ? 'üîí ‡§∏‡•à‡§Ç‡§™‡§≤ ‡§Æ‡•ã‡§° ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø' : 'üîí Sample Mode Active'),
        content: Text(
          isHindi
              ? 'Google Play Store ‡§Ö‡§®‡•Å‡§™‡§æ‡§≤‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π ‡§ê‡§™ ‡§ï‡•á‡§µ‡§≤ ‡§∏‡•à‡§Ç‡§™‡§≤ ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§ö‡§≤‡§§‡§æ ‡§π‡•à‡•§ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§'
              : 'For Google Play Store compliance this release runs strictly in sample mode. Real permission requests are disabled.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text(isHindi ? '‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ' : 'Got it'),
          ),
        ],
      ),
    );
  }

  Future<void> _launchUrl(String url) async {
    if (!mounted) return;

    final isHindi =
        Localizations.localeOf(context).languageCode.startsWith('hi');
    final uri = Uri.parse(url);
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri, mode: LaunchMode.externalApplication);
    } else if (mounted) {
      _showSnackBar(
        isHindi ? 'URL ‡§ñ‡•ã‡§≤‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§•' : 'Could not launch URL',
        isError: true,
      );
    }
  }

  void _showSnackBar(String message, {bool isError = false}) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: isError ? Colors.red : Colors.blue.shade700,
      ),
    );
  }

  void _openAIChatDialog(bool isHindi) {
    showDialog<void>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('ü§ñ Iris - AI Relationship Adviser'),
        content: Text(
          isHindi
              ? 'Iris ‡§Ü‡§™‡§ï‡•Ä relationship problems ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§ï‡§∞ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§ó‡§æ‡•§\n\n‚úÖ ‡§ï‡•ã‡§à ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç\n‚úÖ ‡§∏‡•à‡§Ç‡§™‡§≤ ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§∞‡§§\n‚úÖ 100% ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ\n\n‡§Ø‡§π ‡§´‡•Ä‡§ö‡§∞ ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•ã‡§ó‡§æ!'
              : 'Iris understands your relationship patterns and offers personalised suggestions.\n\n‚úÖ Zero permissions needed\n‚úÖ Works in sample mode\n‚úÖ 100% privacy maintained\n\nThis feature is coming soon!',
          style: const TextStyle(fontSize: 16),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text(isHindi ? '‡§†‡•Ä‡§ï ‡§π‡•à' : 'Close'),
          ),
        ],
      ),
    );
  }

  void _showAISuggestionsDialog(bool isHindi) {
    showDialog<void>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('üí° Smart Suggestions'),
        content: Text(isHindi
            ? 'AI ‡§Ü‡§™‡§ï‡•á relationship patterns ‡§ï‡•ã analyze ‡§ï‡§∞‡§ï‡•á:\n\n‚Ä¢ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§§‡§æ ‡§π‡•à\n‚Ä¢ ‡§∏‡§Ç‡§µ‡§æ‡§¶ ‡§∏‡•Å‡§ß‡§æ‡§∞‡§®‡•á ‡§ï‡•á ‡§ü‡§ø‡§™‡•ç‡§∏ ‡§¶‡•á‡§§‡§æ ‡§π‡•à\n‚Ä¢ ‡§∏‡§Ç‡§¨‡§Ç‡§ß ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§§‡§æ ‡§π‡•à\n\nüîí Zero permissions\nüéØ Sample mode friendly\nüìä Demo data analysis\n\n‡§Ø‡§π ‡§´‡•Ä‡§ö‡§∞ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§Æ‡•á‡§Ç ‡§π‡•à!'
            : 'AI analyses your relationship patterns to:\n\n‚Ä¢ Deliver personalised advice\n‚Ä¢ Offer communication tips\n‚Ä¢ Suggest relationship goals\n\nüîí Zero permissions\nüéØ Sample mode friendly\nüìä Demo data analysis\n\nThis feature is under active development!'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text(isHindi ? '‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ' : 'Understood'),
          ),
        ],
      ),
    );
  }

  Widget _buildSection({
    required String title,
    required List<Widget> children,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Colors.blue.shade700,
          ),
        ),
        const SizedBox(height: 12),
        Card(
          elevation: 2,
          child: Column(children: children),
        ),
      ],
    );
  }

  Widget _buildInfoTile({
    required IconData icon,
    required String title,
    required String subtitle,
    Widget? trailing,
    VoidCallback? onTap,
  }) {
    return ListTile(
      leading: Icon(icon, color: Colors.blue.shade700),
      title: Text(title, style: const TextStyle(fontWeight: FontWeight.w600)),
      subtitle: Text(subtitle),
      trailing:
          trailing ?? (onTap != null ? const Icon(Icons.chevron_right) : null),
      onTap: onTap,
    );
  }

  Widget _buildLinkTile({
    required IconData icon,
    required String title,
    required String subtitle,
    required String url,
  }) {
    return _buildInfoTile(
      icon: icon,
      title: title,
      subtitle: subtitle,
      trailing: const Icon(Icons.open_in_new),
      onTap: () => _launchUrl(url),
    );
  }

  Widget _buildSDKDownloadTile(bool isHindi) {
    final platform = Theme.of(context).platform;
    String title;
    String subtitle;
    String url = '';

    switch (platform) {
      case TargetPlatform.android:
        title = isHindi ? 'Android SDK ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç' : 'Download Android SDK';
        subtitle = isHindi
            ? '‡§Ö‡§™‡§®‡•á ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è TrueCircle SDK ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç'
            : 'Fetch the TrueCircle SDK for your device';
        url = 'https://truecircle.online/sdk/android';
        break;
      case TargetPlatform.windows:
        title = isHindi ? 'Windows SDK ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç' : 'Download Windows SDK';
        subtitle = isHindi
            ? 'Windows ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡§º‡•â‡§∞‡•ç‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è SDK ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§°'
            : 'Download the SDK for Windows';
        url = 'https://truecircle.online/sdk/windows';
        break;
      case TargetPlatform.macOS:
        title = isHindi ? 'macOS SDK ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç' : 'Download macOS SDK';
        subtitle = isHindi
            ? 'macOS ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è SDK ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç'
            : 'Get the SDK for macOS builds';
        url = 'https://truecircle.online/sdk/macos';
        break;
      case TargetPlatform.linux:
        title = isHindi ? 'Linux SDK ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç' : 'Download Linux SDK';
        subtitle = isHindi
            ? 'Linux ‡§µ‡§ø‡§§‡§∞‡§£‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è SDK'
            : 'SDK for Linux distributions';
        url = 'https://truecircle.online/sdk/linux';
        break;
      default:
        title = isHindi ? 'SDK ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç' : 'Download SDK';
        subtitle = isHindi
            ? '‡§Ö‡§™‡§®‡•á ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡§º‡•â‡§∞‡•ç‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è TrueCircle SDK ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç'
            : 'Download the TrueCircle SDK for your platform';
        url = 'https://truecircle.online/sdk';
        break;
    }

    return _buildInfoTile(
      icon: Icons.download,
      title: title,
      subtitle: subtitle,
      onTap: () => _launchUrl(url),
    );
  }

  @override
  Widget build(BuildContext context) {
    final isHindi =
        Localizations.localeOf(context).languageCode.startsWith('hi');

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.blue.shade700,
        foregroundColor: Colors.white,
        title: Row(
          children: [
            const TrueCircleLogo(size: 30),
            const SizedBox(width: 12),
            Text(isHindi ? '‚öôÔ∏è ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏' : '‚öôÔ∏è Settings'),
          ],
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildSection(
              title: isHindi ? 'üöÄ ‡§ê‡§™ ‡§Æ‡•ã‡§°' : 'üöÄ App Mode',
              children: [
                SwitchListTile.adaptive(
                  value: _isFullMode,
                  onChanged: _toggleFullMode,
                  secondary: Icon(
                    _isFullMode ? Icons.data_usage : Icons.preview,
                    color: Colors.blue.shade700,
                  ),
                  title: Text(
                    isHindi
                        ? (_isFullMode ? '‡§´‡•Å‡§≤ ‡§Æ‡•ã‡§° ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø' : '‡§∏‡•à‡§Ç‡§™‡§≤ ‡§Æ‡•ã‡§° ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø')
                        : (_isFullMode
                            ? 'Full Mode Active'
                            : 'Sample Mode Active'),
                  ),
                  subtitle: Text(
                    isHindi
                        ? '‡§Ø‡§π ‡§∞‡§ø‡§≤‡•Ä‡§ú‡§º ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§ï‡•Ä ‡§µ‡§ú‡§π ‡§∏‡•á ‡§π‡§Æ‡•á‡§∂‡§æ ‡§∏‡•à‡§Ç‡§™‡§≤ ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§∞‡§π‡§§‡•Ä ‡§π‡•à'
                        : 'This release stays in sample mode to honour privacy guarantees',
                  ),
                ),
                const Divider(height: 0),
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Text(
                    isHindi
                        ? '‡§∏‡•à‡§Ç‡§™‡§≤ ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§ê‡§™ ‡§°‡•á‡§Æ‡•ã ‡§°‡•á‡§ü‡§æ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§ï‡•ã‡§à ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§æ‡§Ç‡§ó‡§§‡§æ‡•§'
                        : 'In sample mode the app uses demo data and never requests personal permissions.',
                  ),
                ),
              ],
            ),
            const SizedBox(height: 24),
            _buildSection(
              title: isHindi ? 'üõ†Ô∏è ‡§°‡•á‡§µ‡§≤‡§™‡§∞ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™' : 'üõ†Ô∏è Developer Options',
              children: [
                _buildInfoTile(
                  icon: Icons.contacts,
                  title: isHindi
                      ? '‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï (‡§°‡•á‡§Æ‡•ã)'
                      : 'Device Contacts (Demo)',
                  subtitle: isHindi
                      ? '‡§∏‡•à‡§Ç‡§™‡§≤ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§∏‡•Ç‡§ö‡•Ä ‡§¶‡•á‡§ñ‡•á‡§Ç'
                      : 'View the sample contact list',
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => const ContactListPage(),
                      ),
                    );
                  },
                ),
                _buildInfoTile(
                  icon: Icons.smart_toy,
                  title: isHindi ? 'AI ‡§ö‡•à‡§ü ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§µ‡§≤‡•ã‡§ï‡§®' : 'AI Chat Preview',
                  subtitle: isHindi
                      ? 'Iris AI ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞ ‡§ï‡§æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§µ‡§≤‡•ã‡§ï‡§®'
                      : 'Preview the Iris AI advisor experience',
                  onTap: () => _openAIChatDialog(isHindi),
                ),
                _buildSDKDownloadTile(isHindi),
              ],
            ),
            const SizedBox(height: 24),
            _buildSection(
              title: isHindi ? '‚ö° AI ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§´‡•Ä‡§ö‡§∞‡•ç‡§∏' : '‚ö° AI Powered Features',
              children: [
                _buildInfoTile(
                  icon: Icons.psychology,
                  title: isHindi ? '‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡•Å‡§ù‡§æ‡§µ' : 'Smart Suggestions',
                  subtitle: isHindi
                      ? 'AI ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ relationship insights'
                      : 'AI-powered relationship insights',
                  onTap: () => _showAISuggestionsDialog(isHindi),
                ),
                _buildInfoTile(
                  icon: Icons.analytics,
                  title:
                      isHindi ? '‡§∏‡•à‡§Ç‡§™‡§≤ ‡§°‡•á‡§ü‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£' : 'Sample Data Analysis',
                  subtitle: isHindi
                      ? 'Demo_data ‡§´‡§º‡§æ‡§á‡§≤‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§á‡§®‡§∏‡§æ‡§á‡§ü‡•ç‡§∏'
                      : 'Insights generated from Demo_data assets',
                ),
              ],
            ),
            const SizedBox(height: 24),
            _buildSection(
              title: isHindi ? 'üîí ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§î‡§∞ ‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä' : 'üîí Privacy & Legal',
              children: [
                _buildLinkTile(
                  icon: Icons.privacy_tip,
                  title: isHindi ? '‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§®‡•Ä‡§§‡§ø' : 'Privacy Policy',
                  subtitle: isHindi
                      ? '‡§π‡§Æ ‡§Ü‡§™‡§ï‡•Ä ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§ï‡•à‡§∏‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§ñ‡§§‡•á ‡§π‡•à‡§Ç (‡§ï‡•ã‡§à ‡§°‡•á‡§ü‡§æ ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π ‡§®‡§π‡•Ä‡§Ç)'
                      : 'How we protect your privacy (zero data collection)',
                  url: 'https://truecircle.online/privacy-policy',
                ),
                _buildLinkTile(
                  icon: Icons.description,
                  title: isHindi ? '‡§®‡§ø‡§Ø‡§Æ ‡§î‡§∞ ‡§∂‡§∞‡•ç‡§§‡•á‡§Ç' : 'Terms & Conditions',
                  subtitle: isHindi
                      ? '‡§ï‡•á‡§µ‡§≤ ‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è'
                      : 'For educational/demo usage',
                  url: 'https://truecircle.online/terms-and-conditions/',
                ),
                _buildInfoTile(
                  icon: Icons.security,
                  title: isHindi ? '‡§°‡•á‡§ü‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ' : 'Data Safety',
                  subtitle: isHindi
                      ? 'Zero permissions ‚Ä¢ 100% offline ‚Ä¢ ‡§ï‡•á‡§µ‡§≤ ‡§∏‡•à‡§Ç‡§™‡§≤ ‡§°‡•á‡§ü‡§æ'
                      : 'Zero permissions ‚Ä¢ 100% offline ‚Ä¢ Sample data only',
                  trailing: Container(
                    padding:
                        const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: Colors.green,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Text(
                      'SAFE',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 24),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Colors.green.shade700, Colors.blue.shade700],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                children: [
                  const Icon(Icons.verified_user,
                      color: Colors.white, size: 32),
                  const SizedBox(height: 8),
                  Text(
                    isHindi ? 'üîí ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§ó‡§æ‡§∞‡§Ç‡§ü‡•Ä' : 'üîí Privacy Guarantee',
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    isHindi
                        ? 'TrueCircle ‡§ï‡•ã‡§à ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§°‡•á‡§ü‡§æ ‡§è‡§ï‡§§‡•ç‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§\n‡§Ü‡§™‡§ï‡•Ä ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ 100% ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•à‡•§'
                        : 'TrueCircle collects ZERO personal data.\nYour privacy is 100% protected.',
                    textAlign: TextAlign.center,
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 24),
            Center(
              child: Column(
                children: [
                  Text(
                    isHindi
                        ? '¬© 2025 TrueCircle ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ü‡•Ä‡§Æ'
                        : '¬© 2025 TrueCircle Development Team',
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: 12,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    isHindi
                        ? '‡§ú‡§Ø‡§™‡•Å‡§∞, ‡§∞‡§æ‡§ú‡§∏‡•ç‡§•‡§æ‡§®, ‡§≠‡§æ‡§∞‡§§ üáÆüá≥ ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§∞‡•ç‡§Æ‡§ø‡§§'
                        : 'Made in Jaipur, Rajasthan, India üáÆüá≥',
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 32),
            GlobalNavigationBar(isHindi: isHindi),
          ],
        ),
      ),
    );
  }
}
