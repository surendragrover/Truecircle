import '../models/contact.dart';
import '../models/contact_interaction.dart';

class SmartMessageService {
  /// Generates personalized message suggestions based on relationship analysis
  static List<SmartMessage> generateSmartMessages(Contact contact) {
    final messages = <SmartMessage>[];

    // Analyze relationship patterns
    final daysSinceContact = contact.daysSinceLastContact;
    final emotionalScore = contact.emotionalScore;
    final mutualityScore = contact.mutualityScore;

    // Hindi messages for different scenarios
    if (daysSinceContact > 7) {
      messages.addAll(_getReconnectionMessages(contact));
    }

    if (emotionalScore == EmotionalScore.friendlyButFading) {
      messages.addAll(_getRelationshipBoostMessages(contact));
    }

    if (mutualityScore < 0.3) {
      messages.addAll(_getMutualityMessages(contact));
    }

    // Special occasion messages
    messages.addAll(_getSpecialOccasionMessages(contact));

    // Cultural context messages
    messages.addAll(_getCulturalMessages(contact));

    return messages.take(5).toList(); // Return top 5 suggestions
  }

  static List<SmartMessage> _getReconnectionMessages(Contact contact) {
    final name = contact.displayName.split(' ').first;

    return [
      SmartMessage(
        text: "рд╣реИрд▓реЛ $name! рдмрд╣реБрдд рджрд┐рди рд╣реЛ рдЧрдП рдмрд╛рдд рдХрд┐рдП... рдХреИрд╕реЗ рд╣реЛ? ЁЯШК",
        category: MessageCategory.reconnection,
        confidence: 0.9,
        reasoning: "рд▓рдВрдмреЗ рд╕рдордп рд╕реЗ рд╕рдВрдкрд░реНрдХ рдирд╣реАрдВ рд╣реБрдЖ",
      ),
      SmartMessage(
        text: "Hi $name! Hope you're doing well. Missing our chats! тШХ",
        category: MessageCategory.reconnection,
        confidence: 0.85,
        reasoning: "Re-establishing connection",
      ),
      SmartMessage(
        text: "$name рднрд╛рдИ/рдмрд╣рди, рд╕рдм рдареАрдХ рддреЛ рд╣реИ рди? рдорди рдореЗрдВ рдЖрдП рдереЗ рдЖрдк ЁЯТн",
        category: MessageCategory.reconnection,
        confidence: 0.8,
        reasoning: "Caring check-in message",
      ),
    ];
  }

  static List<SmartMessage> _getRelationshipBoostMessages(Contact contact) {
    final name = contact.displayName.split(' ').first;

    return [
      SmartMessage(
        text: "$name, рдЖрдЬрдХрд▓ рдХреИрд╕рд╛ рдЪрд▓ рд░рд╣рд╛ рд╣реИ рд╕рдм? рдХреБрдЫ рдирдпрд╛-рдкреБрд░рд╛рдирд╛ рдмрддрд╛рдУ! ЁЯШД",
        category: MessageCategory.boost,
        confidence: 0.85,
        reasoning: "рд░рд┐рд╢реНрддрд╛ рдордЬрдмреВрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП",
      ),
      SmartMessage(
        text: "Hey $name! Want to catch up over coffee sometime? тШХ",
        category: MessageCategory.boost,
        confidence: 0.8,
        reasoning: "Face-to-face reconnection",
      ),
      SmartMessage(
        text:
            "$name рдЬреА, рдЖрдкрдХреА рд░рд╛рдп рдЪрд╛рд╣рд┐рдП рдереА рдПрдХ рдмрд╛рдд рдкрд░... рдлреНрд░реА рд╣реЛ рддреЛ рдмрд╛рдд рдХрд░реЗрдВ? ЁЯдФ",
        category: MessageCategory.boost,
        confidence: 0.75,
        reasoning: "Seeking advice builds connection",
      ),
    ];
  }

  static List<SmartMessage> _getMutualityMessages(Contact contact) {
    final name = contact.displayName.split(' ').first;

    return [
      SmartMessage(
        text: "$name, рдХреИрд╕реЗ рд╣реИрдВ рдЖрдк? рдХрдм рдорд┐рд▓рдирд╛ рд╣реЛ рд░рд╣рд╛ рд╣реИ? ЁЯШК",
        category: MessageCategory.mutuality,
        confidence: 0.8,
        reasoning: "рдЖрдкрдХреА рддрд░рдл рд╕реЗ рдХрдо response рдорд┐рд▓ рд░рд╣рд╛",
      ),
      SmartMessage(
        text: "Hope I'm not bothering you, $name. Just wanted to check in! ЁЯТЩ",
        category: MessageCategory.mutuality,
        confidence: 0.75,
        reasoning: "Gentle approach for low responders",
      ),
    ];
  }

  static List<SmartMessage> _getSpecialOccasionMessages(Contact contact) {
    final now = DateTime.now();
    final name = contact.displayName.split(' ').first;

    // Weekend messages
    if (now.weekday == DateTime.saturday || now.weekday == DateTime.sunday) {
      return [
        SmartMessage(
          text: "$name, рд╡реАрдХреЗрдВрдб рдХреИрд╕рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ? рдХреБрдЫ рдЦрд╛рд╕ рдкреНрд▓рд╛рди? ЁЯОЙ",
          category: MessageCategory.occasion,
          confidence: 0.7,
          reasoning: "Weekend connection",
        ),
      ];
    }

    // Festival season (example for Diwali period)
    if (now.month == 10 || now.month == 11) {
      return [
        SmartMessage(
          text:
              "$name, рддреНрдпреЛрд╣рд╛рд░реЛрдВ рдХрд╛ рдореМрд╕рдо рд╣реИ! рдШрд░ рдореЗрдВ рдХреИрд╕реА рддреИрдпрд╛рд░рд┐рдпрд╛рдВ рдЪрд▓ рд░рд╣реА рд╣реИрдВ? ЁЯкФ",
          category: MessageCategory.occasion,
          confidence: 0.85,
          reasoning: "Festival season connectivity",
        ),
      ];
    }

    return [];
  }

  static List<SmartMessage> _getCulturalMessages(Contact contact) {
    final name = contact.displayName.split(' ').first;
    final tags = contact.tags;

    if (tags.contains('рдкрд░рд┐рд╡рд╛рд░') || tags.contains('family')) {
      return [
        SmartMessage(
          text:
              "$name рдЬреА, рдШрд░ рдореЗрдВ рд╕рдм рдХреИрд╕реЗ рд╣реИрдВ? рдмреБрдЬреБрд░реНрдЧреЛрдВ рдХрд╛ рдЖрд╢реАрд░реНрд╡рд╛рдж рд▓реЗрддреЗ рд░рд╣рд┐рдП ЁЯЩП",
          category: MessageCategory.cultural,
          confidence: 0.8,
          reasoning: "Family respect and connection",
        ),
      ];
    }

    if (tags.contains('рдХрд╛рдо') || tags.contains('work')) {
      return [
        SmartMessage(
          text:
              "$name, рдХрд╛рдо рдХрд╛ рдмреЛрдЭ рддреЛ рдирд╣реАрдВ рдмрдврд╝ рд░рд╣рд╛? рдереЛрдбрд╝рд╛ break рднреА рд▓реЗрддреЗ рд░рд╣рдирд╛ ЁЯТ╝",
          category: MessageCategory.cultural,
          confidence: 0.75,
          reasoning: "Work-life balance concern",
        ),
      ];
    }

    return [];
  }

  /// AI-powered message personalization
  static String personalizeMessage(SmartMessage message, Contact contact) {
    String personalizedText = message.text;

    // Add personal touches based on contact history
    if (contact.tags.contains('рджреЛрд╕реНрдд') && !personalizedText.contains('рднрд╛рдИ')) {
      personalizedText = personalizedText.replaceAll('рдЬреА', 'рдпрд╛рд░');
    }

    // Add emojis based on emotional score
    switch (contact.emotionalScore) {
      case EmotionalScore.veryWarm:
        if (!personalizedText.contains('ЁЯШК') &&
            !personalizedText.contains('ЁЯТЩ')) {
          personalizedText += ' ЁЯШК';
        }
        break;
      case EmotionalScore.friendlyButFading:
        if (!personalizedText.contains('ЁЯдЧ')) {
          personalizedText += ' ЁЯдЧ';
        }
        break;
      case EmotionalScore.cold:
        // Keep it simple and respectful
        break;
    }

    return personalizedText;
  }
}

class SmartMessage {
  final String text;
  final MessageCategory category;
  final double confidence; // 0.0 to 1.0
  final String reasoning;
  final DateTime timestamp;

  SmartMessage({
    required this.text,
    required this.category,
    required this.confidence,
    required this.reasoning,
    DateTime? timestamp,
  }) : timestamp = timestamp ?? DateTime.now();

  Map<String, dynamic> toJson() => {
        'text': text,
        'category': category.toString(),
        'confidence': confidence,
        'reasoning': reasoning,
        'timestamp': timestamp.toIso8601String(),
      };
}

enum MessageCategory {
  reconnection, // рдкреБрдирдГ рд╕рдВрдкрд░реНрдХ
  boost, // рд░рд┐рд╢реНрддрд╛ рдордЬрдмреВрдд рдХрд░рдирд╛
  mutuality, // рдмрд╛рддрдЪреАрдд рд╕рдВрддреБрд▓рди
  occasion, // рдЕрд╡рд╕рд░ рдЖрдзрд╛рд░рд┐рдд
  cultural, // рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рд╕рдВрджреЗрд╢
  celebration, // рдЦреБрд╢реА рдХреА рдмрд╛рдд
  concern, // рдЪрд┐рдВрддрд╛/рджреЗрдЦрднрд╛рд▓
}

extension MessageCategoryExtension on MessageCategory {
  String get displayName {
    switch (this) {
      case MessageCategory.reconnection:
        return 'рдкреБрдирдГ рдорд┐рд▓рди';
      case MessageCategory.boost:
        return 'рд░рд┐рд╢реНрддрд╛ рдмреЗрд╣рддрд░ рдХрд░реЗрдВ';
      case MessageCategory.mutuality:
        return 'рд╕рдВрддреБрд▓рд┐рдд рдмрд╛рддрдЪреАрдд';
      case MessageCategory.occasion:
        return 'рдЦрд╛рд╕ рдореМрдХрд╛';
      case MessageCategory.cultural:
        return 'рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ';
      case MessageCategory.celebration:
        return 'рдЦреБрд╢реА рдордирд╛рдПрдВ';
      case MessageCategory.concern:
        return 'рджреЗрдЦрднрд╛рд▓';
    }
  }

  String get emoji {
    switch (this) {
      case MessageCategory.reconnection:
        return 'ЁЯдЭ';
      case MessageCategory.boost:
        return 'ЁЯТк';
      case MessageCategory.mutuality:
        return 'тЪЦя╕П';
      case MessageCategory.occasion:
        return 'ЁЯОЙ';
      case MessageCategory.cultural:
        return 'ЁЯЗоЁЯЗ│';
      case MessageCategory.celebration:
        return 'ЁЯОК';
      case MessageCategory.concern:
        return 'ЁЯТЩ';
    }
  }
}
