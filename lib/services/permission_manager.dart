import 'package:flutter/material.dart';
import 'package:truecircle/models/contact_interaction.dart';

/// üîí ZERO-PERMISSION MANAGER - Google Play Store Compliant
///
/// This app operates COMPLETELY offline with NO dangerous permissions.
/// All analysis uses sample data and on-device AI processing.
/// Designed to pass Google Play Store automated review.
class PermissionManager {
  // Sample app - always use sample mode  
  static bool get isSampleMode => true;
  static bool _privacyNoticeShown = false;

  // Getters for app state (always return sample/safe values)
  static bool get hasContactPermission => false; // NEVER request permissions
  static bool get hasCallLogPermission => false; // NEVER request permissions
  static bool get hasSmsPermission => false; // NEVER request permissions
  static bool get userOptedIntoPermissions =>
      false; // NEVER opt into permissions

  // üéØ GOOGLE PLAY COMPLIANCE: Zero permission initialization
  static Future<void> checkPermissions() async {
    // ‚úÖ NO permission checks - pure offline app
    // This app NEVER requests dangerous permissions
  }

  // üõ°Ô∏è PRIVACY NOTICE: Show app is 100% safe and offline
  static Future<bool> showPrivacyDisclaimer(BuildContext context) async {
    if (_privacyNoticeShown) return true;

    bool result = await showDialog<bool>(
          context: context,
          barrierDismissible: false,
          builder: (BuildContext context) {
            return AlertDialog(
              title: const Row(
                children: [
                  Icon(Icons.verified, color: Colors.green),
                  SizedBox(width: 8),
                  Expanded(child: Text('üîí 100% ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§î‡§∞ ‡§®‡§ø‡§ú‡•Ä')),
                ],
              ),
              content: SizedBox(
                width: double.maxFinite,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.green.withValues(alpha: 0.3),
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(
                            color: Colors.green.withValues(alpha: 0.3)),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '‚úÖ ‡§Ø‡§π ‡§è‡§™ ‡§Ü‡§™‡§∏‡•á ‡§ï‡•ã‡§à ‡§≠‡•Ä permission ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§æ‡§Ç‡§ó‡§§‡•Ä',
                            style: TextStyle(
                                fontWeight: FontWeight.bold,
                                color: Colors.green.shade700),
                          ),
                          const SizedBox(height: 8),
                          const Text('‚Ä¢ ‡§ï‡•ã‡§à contact access ‡§®‡§π‡•Ä‡§Ç'),
                          const Text('‚Ä¢ ‡§ï‡•ã‡§à call log access ‡§®‡§π‡•Ä‡§Ç'),
                          const Text('‚Ä¢ ‡§ï‡•ã‡§à SMS access ‡§®‡§π‡•Ä‡§Ç'),
                          const Text('‚Ä¢ ‡§Ü‡§™‡§ï‡§æ ‡§ï‡•ã‡§à personal data access ‡§®‡§π‡•Ä‡§Ç'),
                        ],
                      ),
                    ),
                    const SizedBox(height: 12),
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.blue.withValues(alpha: 0.3),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'ü§ñ ‡§Ø‡§π ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à:',
                            style: TextStyle(
                                fontWeight: FontWeight.bold,
                                color: Colors.blue.shade700),
                          ),
                          const SizedBox(height: 6),
                          const Text(
                              '‚Ä¢ Sample relationship data ‡§∏‡•á ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡§æ ‡§Ö‡§µ‡§∏‡§∞'),
                          const Text(
                              '‚Ä¢ Offline AI analysis (‡§ï‡•ã‡§à internet ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§®‡§π‡•Ä‡§Ç)'),
                          const Text(
                              '‚Ä¢ Cultural insights ‡§î‡§∞ festival recommendations'),
                          const Text(
                              '‚Ä¢ Privacy-first design - ‡§Ü‡§™‡§ï‡§æ data ‡§ï‡•á‡§µ‡§≤ ‡§Ü‡§™‡§ï‡•Ä device ‡§™‡§∞'),
                        ],
                      ),
                    ),
                    const SizedBox(height: 12),
                    Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: Colors.orange.withValues(alpha: 0.3),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: const Text(
                        'üí° ‡§Ø‡§π ‡§è‡§ï educational app ‡§π‡•à ‡§ú‡•ã relationship insights ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§§‡•Ä ‡§π‡•à‡•§',
                        style: TextStyle(
                            fontSize: 12, fontStyle: FontStyle.italic),
                      ),
                    ),
                  ],
                ),
              ),
              actions: [
                ElevatedButton(
                  onPressed: () {
                    _privacyNoticeShown = true;
                    Navigator.of(context).pop(true);
                  },
                  style:
                      ElevatedButton.styleFrom(backgroundColor: Colors.green),
                  child: const Text('‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ - TrueCircle ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç'),
                ),
              ],
            );
          },
        ) ??
        false;

    return result;
  }

  // üéØ SAMPLE MODE BANNER: Always visible since app is always in sample mode
  static Widget buildSampleModeBanner(BuildContext context) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(12),
      margin: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Colors.blue.withValues(alpha: 0.3),
            Colors.purple.withValues(alpha: 0.3)
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withValues(alpha: 0.3),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Row(
            children: [
              Icon(Icons.school, color: Colors.white, size: 20),
              SizedBox(width: 8),
              Expanded(
                child: Text(
                  'üìö Educational Sample Mode',
                  style: TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                  ),
                ),
              ),
              Icon(Icons.verified, color: Colors.white, size: 16),
            ],
          ),
          const SizedBox(height: 8),
          const Text(
            '‡§Ø‡§π app ‡§Ü‡§™‡§ï‡•ã relationship analysis ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è sample data ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à:',
            style: TextStyle(color: Colors.white, fontSize: 14),
          ),
          const SizedBox(height: 6),
          Text(
            '‚Ä¢ üìä Sample contacts ‡§ï‡•á ‡§∏‡§æ‡§• communication patterns\n‚Ä¢ ü§ñ Offline AI emotion analysis\n‚Ä¢ üé≠ Cultural insights ‡§î‡§∞ festival recommendations\n‚Ä¢ üì± Privacy-safe learning experience',
            style: TextStyle(
                color: Colors.white.withValues(alpha: 0.3), fontSize: 13),
          ),
          const SizedBox(height: 8),
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.3),
              borderRadius: BorderRadius.circular(8),
            ),
            child: const Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'üîí Privacy Guarantee:',
                  style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 13),
                ),
                Text(
                  '‚úì No personal data access\n‚úì No dangerous permissions\n‚úì 100% offline operation\n‚úì Educational purpose only',
                  style: TextStyle(color: Colors.white, fontSize: 12),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // üìä OFFLINE EMOTION ANALYSIS (Educational Sample)
  static Map<String, dynamic> analyzeOfflineEmotion(String text) {
    // Educational emotion analysis based on keywords
    final Map<String, List<String>> emotionKeywords = {
      'happy': [
        '‡§ñ‡•Å‡§∂',
        '‡§ñ‡•Å‡§∂‡•Ä',
        '‡§Æ‡§ú‡§æ',
        '‡§Ö‡§ö‡•ç‡§õ‡§æ',
        '‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ',
        'happy',
        'good',
        'great',
        'awesome',
        'üòä',
        'üòÑ',
        '‚ù§Ô∏è'
      ],
      'sad': [
        '‡§¶‡•Å‡§ñ',
        '‡§â‡§¶‡§æ‡§∏',
        '‡§ó‡§Æ',
        '‡§™‡§∞‡•á‡§∂‡§æ‡§®',
        'sad',
        'upset',
        'down',
        'depressed',
        'üò¢',
        'üòû'
      ],
      'angry': [
        '‡§ó‡•Å‡§∏‡•ç‡§∏‡§æ',
        '‡§®‡§æ‡§∞‡§æ‡§ú',
        '‡§ù‡•Å‡§Ç‡§ù‡§≤‡§æ',
        'angry',
        'mad',
        'furious',
        'annoyed',
        'üò†',
        'üò°'
      ],
      'love': [
        '‡§™‡•ç‡§Ø‡§æ‡§∞',
        '‡§Æ‡•ã‡§π‡§¨‡•ç‡§¨‡§§',
        '‡§á‡§∂‡•ç‡§ï',
        'love',
        'care',
        'adore',
        'üíï',
        'üíñ',
        '‚ù§Ô∏è'
      ],
      'excited': [
        '‡§â‡§§‡•ç‡§∏‡§æ‡§π‡§ø‡§§',
        '‡§ú‡•ã‡§∂',
        'excited',
        'thrilled',
        'pumped',
        'üéâ',
        'üî•'
      ],
    };

    final lowerText = text.toLowerCase();
    Map<String, int> emotionScores = {};

    emotionKeywords.forEach((emotion, keywords) {
      int score = 0;
      for (String keyword in keywords) {
        if (lowerText.contains(keyword.toLowerCase())) {
          score += 1;
        }
      }
      emotionScores[emotion] = score;
    });

    // Find dominant emotion
    String dominantEmotion = 'neutral';
    int maxScore = 0;
    emotionScores.forEach((emotion, score) {
      if (score > maxScore) {
        maxScore = score;
        dominantEmotion = emotion;
      }
    });

    double confidence = maxScore > 0
        ? (maxScore / text.split(' ').length).clamp(0.0, 1.0)
        : 0.5;

    return {
      'emotion': dominantEmotion,
      'confidence': confidence,
      'all_emotions': emotionScores,
      'offline_analysis': true,
      'educational_sample': true,
      'message': 'üéì Educational sample - ‡§™‡•Ç‡§∞‡•ç‡§£ offline analysis'
    };
  }

  // üìä EDUCATIONAL RELATIONSHIP INSIGHTS
  static Map<String, dynamic> generateOfflineInsights(
      List<ContactInteraction> interactions) {
    if (interactions.isEmpty) {
      return {
        'relationship_health': 0.7,
        'communication_pattern': 'balanced',
        'suggestions': ['‡§Ö‡§ß‡§ø‡§ï ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡§∞‡•á‡§Ç', '‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç'],
        'educational_sample': true,
        'offline_analysis': true
      };
    }

    // Educational pattern analysis
    int totalInteractions = interactions.length;
    int initiatedByMe = interactions.where((i) => i.initiatedByMe).length;
    double initiationRatio = initiatedByMe / totalInteractions;

    double avgSentiment = interactions
            .map((i) => i.sentimentScore ?? 0.5)
            .fold(0.0, (a, b) => a + b) /
        totalInteractions;

    // Calculate relationship health for educational purposes
    double healthScore =
        (avgSentiment + (1 - (initiationRatio - 0.5).abs() * 2)) / 2;

    String pattern = initiationRatio > 0.7
        ? 'one_sided_by_me'
        : initiationRatio < 0.3
            ? 'one_sided_by_them'
            : 'balanced';

    List<String> suggestions = [];
    if (pattern == 'one_sided_by_me') {
      suggestions.add('‡§ï‡§Æ ‡§™‡§π‡§≤ ‡§ï‡§∞‡•á‡§Ç, ‡§¶‡•Ç‡§∏‡§∞‡•á ‡§ï‡•ã ‡§≠‡•Ä ‡§Æ‡•å‡§ï‡§æ ‡§¶‡•á‡§Ç');
    } else if (pattern == 'one_sided_by_them') {
      suggestions.add('‡§Ö‡§ß‡§ø‡§ï ‡§™‡§π‡§≤ ‡§ï‡§∞‡•á‡§Ç, ‡§∞‡§ø‡§∂‡•ç‡§§‡•á ‡§Æ‡•á‡§Ç ‡§Ø‡•ã‡§ó‡§¶‡§æ‡§® ‡§¶‡•á‡§Ç');
    }

    if (avgSentiment < 0.5) {
      suggestions.add('‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç');
    }

    return {
      'relationship_health': healthScore,
      'communication_pattern': pattern,
      'suggestions': suggestions,
      'total_interactions': totalInteractions,
      'educational_sample': true,
      'offline_analysis': true,
      'privacy_safe': true
    };
  }

  // üìö EDUCATIONAL DEMO CONTACTS - 30 days of data
  static List<ContactInteraction> getSampleContacts() {
    List<ContactInteraction> contacts = [];

    // Generate 30 days of demo data
    for (int i = 0; i < 30; i++) {
      contacts.addAll([
        ContactInteraction(
          contactId: 'demo_${i}_1',
          timestamp: DateTime.now().subtract(Duration(days: i)),
          type: InteractionType.call,
          duration: 120 + (i * 10),
          initiatedByMe: i % 2 == 0,
          sentimentScore: 0.6 + (i * 0.01),
          metadata: {
            'contactName': _getDemoName(i % 8),
            'contactPhone': '+91-987654${3210 + i}',
            'demoContact': true
          },
        ),
        ContactInteraction(
          contactId: 'demo_${i}_2',
          timestamp: DateTime.now().subtract(Duration(days: i, hours: 2)),
          type: InteractionType.message,
          duration: 0,
          initiatedByMe: i % 3 != 0,
          sentimentScore: 0.5 + (i * 0.015),
          metadata: {
            'contactName': _getDemoName((i + 1) % 8),
            'contactPhone': '+91-987654${3220 + i}',
            'demoContact': true
          },
        ),
      ]);
    }

    return contacts;
  }

  static String _getDemoName(int index) {
    List<String> names = [
      '‡§∞‡§æ‡§ú ‡§∂‡§∞‡•ç‡§Æ‡§æ',
      '‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ó‡•Å‡§™‡•ç‡§§‡§æ',
      '‡§Ö‡§Æ‡§ø‡§§ ‡§ï‡•Å‡§Æ‡§æ‡§∞',
      '‡§∏‡•ç‡§®‡•á‡§π‡§æ ‡§∏‡§ø‡§Ç‡§π',
      '‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§Ö‡§ó‡•ç‡§∞‡§µ‡§æ‡§≤',
      '‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§µ‡§∞‡•ç‡§Æ‡§æ',
      '‡§∞‡•ã‡§π‡§ø‡§§ ‡§ú‡•à‡§®',
      '‡§Æ‡•Ä‡§∞‡§æ ‡§ö‡•å‡§ß‡§∞‡•Ä'
    ];
    return names[index];
  }

  // Check if educational feature is available (always true)
  static bool isFeatureAvailable(String feature) {
    // All features are available in educational demo mode
    return true;
  }

  // Get educational feature status message
  static String getFeatureStatusMessage(String feature) {
    return 'Educational demo mode - Using sample data for learning';
  }

  // Educational cultural suggestions
  static List<String> getCulturalSuggestions() {
    return [
      'üéä Diwali ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§Ö‡§™‡§®‡•á ‡§∞‡§ø‡§∂‡•ç‡§§‡•á‡§¶‡§æ‡§∞‡•ã‡§Ç ‡§ï‡•ã ‡§∂‡•Å‡§≠‡§ï‡§æ‡§Æ‡§®‡§æ‡§è‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç',
      'üå∫ Holi ‡§Æ‡•á‡§Ç ‡§Æ‡§ø‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ú‡§∂‡•ç‡§® ‡§Æ‡§®‡§æ‡§è‡§Ç',
      'üôè Karva Chauth ‡§™‡§∞ ‡§™‡§§‡§ø-‡§™‡§§‡•ç‡§®‡•Ä ‡§ï‡•á ‡§∞‡§ø‡§∂‡•ç‡§§‡•á ‡§ï‡•ã ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§¨‡§®‡§æ‡§è‡§Ç',
      'üé≠ Navratri ‡§Æ‡•á‡§Ç ‡§∏‡§æ‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§≠‡§æ‡§ó ‡§≤‡•á‡§Ç',
      '‚ú® Eid ‡§™‡§∞ ‡§∏‡§≠‡•Ä ‡§ß‡§∞‡•ç‡§Æ‡•ã‡§Ç ‡§ï‡•á ‡§Æ‡§ø‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•ã ‡§¨‡§ß‡§æ‡§à ‡§¶‡•á‡§Ç',
    ];
  }

  // Reset app state (not needed for Sample App)
  static void resetPermissions() {
    // Sample App doesn't need reset - always in safe mode
    _privacyNoticeShown = false;
  }
}
