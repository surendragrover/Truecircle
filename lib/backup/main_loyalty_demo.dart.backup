import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'models/emotion_entry.dart';
import 'models/contact.dart';
import 'models/contact_interaction.dart';
import 'models/privacy_settings.dart';
import 'services/language_service.dart';
import 'services/loyalty_points_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  try {
    // Initialize Firebase
    debugPrint('üî• Firebase Initialization...');
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    debugPrint('‚úÖ Firebase initialized');

    // Initialize Language Service
    debugPrint('üåê Initializing Language Service...');
    await LanguageService.instance.preCacheCommonTranslations();
    debugPrint('‚úÖ Language Service ready');

    // Initialize Loyalty Points Service
    debugPrint('üí∞ Initializing Loyalty Points Service...');
    LoyaltyPointsService.instance; // This triggers initialization
    debugPrint('‚úÖ Loyalty Points Service ready');

    // Initialize Hive with simpler error handling
    await Hive.initFlutter('truecircle_data');
    debugPrint('‚úÖ Hive path initialized');

    // Register adapters safely (FIXED TYPE IDs)
    _registerAdapterSafely<EmotionEntry>(0, () => EmotionEntryAdapter());
    _registerAdapterSafely<Contact>(1, () => ContactAdapter());
    _registerAdapterSafely<ContactStatus>(2, () => ContactStatusAdapter());
    _registerAdapterSafely<ContactInteraction>(
        3, () => ContactInteractionAdapter());
    _registerAdapterSafely<InteractionType>(4, () => InteractionTypeAdapter());
    _registerAdapterSafely<EmotionalScore>(5, () => EmotionalScoreAdapter());
    _registerAdapterSafely<PrivacySettings>(6, () => PrivacySettingsAdapter());

    debugPrint('‚úÖ All Hive adapters registered');
    debugPrint('üöÄ TrueCircle Loyalty Points Demo ready!');
  } catch (e) {
    debugPrint('‚ùå Initialization failed: $e');
    // Continue anyway - app will work with limited functionality
  }

  runApp(const TrueCircleLoyaltyPointsDemo());
}

void _registerAdapterSafely<T>(
    int typeId, TypeAdapter<T> Function() adapterFunction) {
  try {
    if (!Hive.isAdapterRegistered(typeId)) {
      Hive.registerAdapter<T>(adapterFunction());
      debugPrint('‚úÖ Registered adapter for ${T.toString()} (ID: $typeId)');
    } else {
      debugPrint(
          '‚ÑπÔ∏è Adapter for ${T.toString()} already registered (ID: $typeId)');
    }
  } catch (e) {
    debugPrint('‚ö†Ô∏è Failed to register adapter for ${T.toString()}: $e');
  }
}

class TrueCircleLoyaltyPointsDemo extends StatelessWidget {
  const TrueCircleLoyaltyPointsDemo({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'TrueCircle Loyalty Points Demo',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.amber),
        useMaterial3: true,
        appBarTheme: AppBarTheme(
          backgroundColor: Colors.amber[100],
          foregroundColor: Colors.black87,
          elevation: 2,
        ),
        cardTheme: const CardThemeData(
          elevation: 4,
          shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.all(Radius.circular(12))),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            shape:
                RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          ),
        ),
      ),
      home: const Scaffold(
        body: Center(
          child: Text('Loyalty Points Demo - Under Development'),
        ),
      ),
    );
  }
}
