// lib/core/app_initialization.dart

import 'package:flutter/foundation.dart';
import 'package:truecircle/core/service_locator.dart';
import 'package:truecircle/services/privacy_mode_manager.dart';
import 'package:truecircle/services/privacy_service.dart';
import 'package:truecircle/services/json_data_service.dart';
import 'package:truecircle/services/ai_orchestrator_service.dart';
import 'package:truecircle/services/demo_seed_service.dart';

/// ‡§ê‡§™ ‡§ï‡•á ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§‡•Ä ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§î‡§∞ ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º‡•á‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡•ç‡§≤‡§æ‡§∏
/// 
/// ‡§Ø‡§π ‡§ï‡•ç‡§≤‡§æ‡§∏ TrueCircle ‡§ê‡§™ ‡§ï‡•á ‡§∏‡§≠‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§ï‡•ç‡§∞‡§Æ ‡§Æ‡•á‡§Ç ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à
class AppInitialization {
  
  /// ‡§ê‡§™ ‡§ï‡•Ä ‡§∏‡§≠‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡§®‡§æ
  /// 
  /// ‡§Ø‡§π method main.dart ‡§Æ‡•á‡§Ç ‡§ê‡§™ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç
  static Future<void> initializeApp() async {
    try {
      debugPrint('üöÄ TrueCircle ‡§ê‡§™ ‡§ï‡§æ ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º‡•á‡§∂‡§® ‡§∂‡•Å‡§∞‡•Ç...');
      
      // 1. Service Locator setup
      debugPrint('üìã Service Locator ‡§∏‡•á‡§ü‡§Ö‡§™...');
      final serviceLocator = ServiceLocator.instance;
      
      // 2. Privacy Mode Manager ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡§®‡§æ
      debugPrint('üîê Privacy Mode Manager ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º...');
      final privacyModeManager = PrivacyModeManager();
      serviceLocator.register<PrivacyModeManager>(privacyModeManager);
      
      // 3. Privacy Service ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡§®‡§æ
      debugPrint('üõ°Ô∏è Privacy Service ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º...');
      final privacyService = PrivacyService();
      await privacyService.init();
      serviceLocator.register<PrivacyService>(privacyService);
      
      // 4. JSON Data Service ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡§®‡§æ
      debugPrint('üìÑ JSON Data Service ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º...');
      final jsonDataService = JsonDataService.instance;
      serviceLocator.register<JsonDataService>(jsonDataService);
      
      // 5. AI Services ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡§∞‡§®‡§æ
      debugPrint('ü§ñ AI Services ‡§∏‡•á‡§ü‡§Ö‡§™...');
      await serviceLocator.setupAIServices();

      // 5b. AI Orchestrator auto-start (proactive feature readiness)
      debugPrint('üß† AI Orchestrator check...');
      AIOrchestratorService().startIfPossible();

  // 5c. Seed demo scenario data (sample mode only, idempotent)
  debugPrint('üå± Demo seed check...');
  await DemoSeedService().seedIfNeeded();
      
      // 6. ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º‡•á‡§∂‡§® ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø
      debugPrint('‚úÖ ‡§∏‡§≠‡•Ä ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§π‡•Å‡§à‡§Ç');
      _printInitializationSummary();
      // Start orchestrator (real call separated to ensure summary prints even if it fails)
      AIOrchestratorService().startIfPossible();
      
    } catch (e, stackTrace) {
      debugPrint('‚ùå ‡§ê‡§™ ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º‡•á‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: $e');
      debugPrint('Stack trace: $stackTrace');
      
      // Critical error: ‡§Ö‡§ó‡§∞ AI services fail ‡§π‡•ã‡§Ç ‡§§‡•ã ‡§≠‡•Ä ‡§ê‡§™ ‡§ö‡§≤‡§æ‡§®‡§æ
      await _setupFallbackServices();
    }
  }
  
  /// ‡§Ö‡§ó‡§∞ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º‡•á‡§∂‡§® fail ‡§π‡•ã ‡§§‡•ã fallback services ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡§∞‡§®‡§æ
  static Future<void> _setupFallbackServices() async {
    debugPrint('‚ö†Ô∏è Fallback services ‡§∏‡•á‡§ü‡§Ö‡§™...');
    
    try {
      final serviceLocator = ServiceLocator.instance;
      
      // Essential services only
      final privacyService = PrivacyService();
      await privacyService.init();
      serviceLocator.register<PrivacyService>(privacyService);
      
      final jsonDataService = JsonDataService.instance;
      serviceLocator.register<JsonDataService>(jsonDataService);
      
      debugPrint('‚úÖ Fallback services ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§™‡•Ç‡§∞‡§æ');
      
    } catch (e) {
      debugPrint('‚ùå Fallback services ‡§≠‡•Ä fail ‡§π‡•Å‡§à‡§Ç: $e');
    }
  }
  
  /// ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º‡•á‡§∂‡§® ‡§ï‡§æ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂ ‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§ï‡§∞‡§®‡§æ
  static void _printInitializationSummary() {
    final serviceLocator = ServiceLocator.instance;
    
    debugPrint('\nüìä TrueCircle Initialization Summary:');
    debugPrint('====================================');
    
    // Registered services ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä
    final registeredServices = serviceLocator.getRegisteredServices();
    debugPrint('üîß Registered Services: ${registeredServices.length}');
    registeredServices.forEach((type, implementation) {
      debugPrint('  ‚Ä¢ $type -> $implementation');
    });
    
    // AI Service status
    final aiStatus = serviceLocator.getAIServiceStatus();
    debugPrint('\nü§ñ AI Service Status:');
    aiStatus.forEach((key, value) {
      debugPrint('  ‚Ä¢ $key: $value');
    });
    
    // Privacy status
    try {
      final privacyService = serviceLocator.get<PrivacyService>();
  final isPrivacyMode = privacyService.isPrivacyMode();
      debugPrint('\nüîê Privacy Status:');
  debugPrint('  ‚Ä¢ Privacy Mode: ${isPrivacyMode ? "Active" : "Inactive"}');
      debugPrint('  ‚Ä¢ Privacy-First Architecture: Enabled');
    } catch (e) {
      debugPrint('\n‚ö†Ô∏è Privacy Service not available: $e');
    }
    
    debugPrint('====================================\n');
  }
  
  /// ‡§ê‡§™ ‡§ï‡•Ä health check ‡§ï‡§∞‡§®‡§æ
  static Future<Map<String, dynamic>> performHealthCheck() async {
    final healthStatus = <String, dynamic>{};
    final serviceLocator = ServiceLocator.instance;
    
    try {
      // Service Locator health
      healthStatus['service_locator'] = {
        'status': 'healthy',
        'registered_services': serviceLocator.getRegisteredServices().length,
      };
      
      // Privacy Service health
      if (serviceLocator.isRegistered<PrivacyService>()) {
        final privacyService = serviceLocator.get<PrivacyService>();
        healthStatus['privacy_service'] = {
          'status': 'healthy',
          'privacy_mode': privacyService.isPrivacyMode(),
        };
      } else {
        healthStatus['privacy_service'] = {'status': 'not_registered'};
      }
      
      // AI Service health
      if (serviceLocator.hasAIService) {
        healthStatus['ai_service'] = {
          'status': 'healthy',
          'details': serviceLocator.getAIServiceStatus(),
        };
      } else {
        healthStatus['ai_service'] = {'status': 'not_available'};
      }
      
      // JSON Data Service health
      if (serviceLocator.isRegistered<JsonDataService>()) {
        healthStatus['json_data_service'] = {'status': 'healthy'};
      } else {
        healthStatus['json_data_service'] = {'status': 'not_registered'};
      }
      
      healthStatus['overall_status'] = 'healthy';
      
    } catch (e) {
      healthStatus['overall_status'] = 'error';
      healthStatus['error'] = e.toString();
    }
    
    return healthStatus;
  }
  
  /// Development mode ‡§Æ‡•á‡§Ç additional debugging information
  static void enableDevelopmentMode() {
    if (kDebugMode) {
      debugPrint('üîß Development Mode Enabled');
      
      // Additional logging for services
      final serviceLocator = ServiceLocator.instance;
      debugPrint('Service Locator Instance: ${serviceLocator.hashCode}');
      
      // Print all registered services with more details
      final services = serviceLocator.getRegisteredServices();
      debugPrint('Detailed Service Registry:');
      services.forEach((type, implementation) {
        debugPrint('  üì¶ $type');
        debugPrint('     Implementation: $implementation');
        debugPrint('     Hash: ${implementation.hashCode}');
      });
    }
  }
}

/// Service Locator ‡§ï‡•á ‡§≤‡§ø‡§è helpful extensions
extension ServiceLocatorQuickAccess on ServiceLocator {
  /// Quick access methods for commonly used services
  
  PrivacyService? get privacyService {
    try {
      return get<PrivacyService>();
    } catch (e) {
      debugPrint('Privacy Service not available: $e');
      return null;
    }
  }
  
  PrivacyModeManager? get privacyModeManager {
    try {
      return get<PrivacyModeManager>();
    } catch (e) {
      debugPrint('Privacy Mode Manager not available: $e');
      return null;
    }
  }
  
  JsonDataService? get jsonDataService {
    try {
      return get<JsonDataService>();
    } catch (e) {
      debugPrint('JSON Data Service not available: $e');
      return null;
    }
  }
}