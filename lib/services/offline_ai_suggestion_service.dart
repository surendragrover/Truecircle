import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'json_data_service.dart';

/// Offline AI Suggestion Service
/// Emulates lightweight on‚Äëdevice AI by selecting culturally aware, bilingual
/// suggestions deterministically (date + simple hashing) so output feels
/// dynamic without network / heavy models. Activated only after model
/// download flag is stored in Hive.
class OfflineAISuggestionService {
  OfflineAISuggestionService._();
  static final OfflineAISuggestionService instance = OfflineAISuggestionService._();

  /// Hive settings box name
  static const String _settingsBox = 'truecircle_settings';

  /// Returns true if model download flag was set (per phone or global fallback)
  Future<bool> isModelReady() async {
    try {
      final box = Hive.isBoxOpen(_settingsBox)
          ? Hive.box(_settingsBox)
          : await Hive.openBox(_settingsBox);
      // Try phone specific first
      final phone = box.get('current_phone_number') as String?;
      if (phone != null) {
        return box.get('${phone}_models_downloaded', defaultValue: false) as bool;
      }
      return box.get('global_models_downloaded', defaultValue: false) as bool;
    } catch (e) {
      debugPrint('[OfflineAISuggestionService] isModelReady error: $e');
      return false; // Fail safe: treat as not ready
    }
  }

  /// Daily breathing suggestion (wraps existing JSON rotation) with gating
  Future<Map<String, dynamic>?> getDailyBreathingSuggestion() async {
    if (!await isModelReady()) return null; // Gate behind model readiness
    return JsonDataService.instance.getTodaysBreathingTip();
  }

  /// Daily meditation suggestion (wraps existing JSON rotation) with gating
  Future<Map<String, dynamic>?> getDailyMeditationSuggestion() async {
    if (!await isModelReady()) return null;
    return JsonDataService.instance.getTodaysMeditationTip();
  }

  /// Festival message suggestions (bilingual) built from upcoming festival data.
  /// count: number of suggestions to return.
  Future<List<Map<String, String>>> getFestivalMessageSuggestions({int count = 2}) async {
    if (!await isModelReady()) return [];
    try {
      final upcoming = await JsonDataService.instance.getUpcomingFestivals();
      if (upcoming.isEmpty) return [];
      final rngSeed = DateTime.now().difference(DateTime(DateTime.now().year)).inDays;
      final rnd = Random(rngSeed);
      // Shuffle copy and take count
      final shuffled = [...upcoming]..shuffle(rnd);
      return shuffled.take(count).map<Map<String, String>>((f) {
        final nameEn = f['festival_name']?.toString() ?? 'Festival';
        final nameHi = f['festival_name_hindi']?.toString() ?? nameEn;
        final greeting = f['greetingMessages'];
        String enMsg = 'May the joy of $nameEn strengthen your bonds today. Reach out with warmth & gratitude.';
        String hiMsg = '$nameHi ‡§ï‡•Ä ‡§∂‡•Å‡§≠‡§ï‡§æ‡§Æ‡§®‡§æ‡§è‡§Ç! ‡§Ü‡§ú ‡§Ö‡§™‡§®‡•á ‡§™‡•ç‡§∞‡§ø‡§Ø‡§ú‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§Ø‡§æ‡§∞ ‡§î‡§∞ ‡§Ü‡§≠‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç‡•§';
        if (greeting is Map) {
          enMsg = greeting['english']?.toString() ?? enMsg;
          hiMsg = greeting['hindi']?.toString() ?? hiMsg;
        }
        // Add AI flavored enhancement
        final enhancer = _festivalEnhancers[rnd.nextInt(_festivalEnhancers.length)];
        return {
          'festival_en': nameEn,
            'festival_hi': nameHi,
          'message_en': '$enMsg $enhancer',
          'message_hi': '$hiMsg $enhancer',
        };
      }).toList();
    } catch (e) {
      debugPrint('[OfflineAISuggestionService] festival suggestions error: $e');
      return [];
    }
  }

  /// Event (budget / planning) tip suggestion
  Future<String?> getEventPlanningSuggestion({bool hindi = false}) async {
    if (!await isModelReady()) return null;
    final pool = hindi ? _eventPlanningTipsHi : _eventPlanningTipsEn;
    final day = DateTime.now().difference(DateTime(DateTime.now().year)).inDays;
    return pool[day % pool.length];
  }

  // Static enhancement suffixes
  static const List<String> _festivalEnhancers = [
    'üåü Strengthen emotional closeness.',
    'ü™î Share one mindful gratitude note.',
    'üíû Offer a small act of kindness.',
    'üéâ Celebrate with cultural authenticity.',
    'ü§ó Reconnect through a meaningful memory.'
  ];

  static const List<String> _eventPlanningTipsEn = [
    'Allocate 60% budget to essentials (food, venue), 20% gifts, 20% emotional moments (photos / handwritten notes).',
    'Send festival / event reminders 3 days early; emotional impact peaks when outreach is proactive.',
    'Plan one culturally rooted ritual + one modern bonding activity for balance.',
    'Keep a gratitude log post-event to reinforce relational memory.',
    'Micro‚Äëbudget tip: Handwritten message + small token > large generic gift.'
  ];

  static const List<String> _eventPlanningTipsHi = [
    '‡§Ö‡§™‡§®‡•á ‡§¨‡§ú‡§ü ‡§ï‡§æ 60% ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§ö‡•Ä‡§ú‡§º‡•ã‡§Ç (‡§≠‡•ã‡§ú‡§®/‡§∏‡•ç‡§•‡§æ‡§®), 20% ‡§â‡§™‡§π‡§æ‡§∞ ‡§î‡§∞ 20% ‡§≠‡§æ‡§µ‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§™‡§≤‡•ã‡§Ç (‡§´‡§º‡•ã‡§ü‡•ã / ‡§π‡§∏‡•ç‡§§‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§®‡•ã‡§ü) ‡§™‡§∞ ‡§∞‡§ñ‡•á‡§Ç‡•§',
    '‡§á‡§µ‡•á‡§Ç‡§ü / ‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞ ‡§∞‡§ø‡§Æ‡§æ‡§á‡§Ç‡§°‡§∞ 3 ‡§¶‡§ø‡§® ‡§™‡§π‡§≤‡•á ‡§≠‡•á‡§ú‡•á‡§Ç; ‡§≠‡§æ‡§µ‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ ‡§∏‡§Æ‡§Ø ‡§™‡§∞ ‡§™‡§π‡§≤ ‡§∏‡•á ‡§¨‡§¢‡§º‡§§‡§æ ‡§π‡•à‡•§',
    '‡§è‡§ï ‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§∞‡§ø‡§µ‡§æ‡§ú‡§º + ‡§è‡§ï ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§è‡§ï‡•ç‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä ‡§ú‡•ã‡§°‡§º‡•á‡§Ç ‡§∏‡§Ç‡§§‡•Å‡§≤‡§® ‡§ï‡•á ‡§≤‡§ø‡§è‡•§',
    '‡§á‡§µ‡•á‡§Ç‡§ü ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ü‡§≠‡§æ‡§∞ ‡§∏‡•Ç‡§ö‡•Ä ‡§≤‡§ø‡§ñ‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§∞‡§ø‡§∂‡•ç‡§§‡•ã‡§Ç ‡§ï‡•Ä ‡§Ø‡§æ‡§¶‡•á‡§Ç ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§π‡•ã‡§Ç‡•§',
    '‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã ‡§¨‡§ú‡§ü ‡§ü‡§ø‡§™: ‡§π‡§∏‡•ç‡§§‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§∏‡§Ç‡§¶‡•á‡§∂ + ‡§õ‡•ã‡§ü‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§¨‡§°‡§º‡•á ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§â‡§™‡§π‡§æ‡§∞ ‡§∏‡•á ‡§¨‡•á‡§π‡§§‡§∞ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§'
  ];
}
