import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';
import '../models/contact.dart';
import '../models/contact_interaction.dart';

/// üìä Advanced Analytics Dashboard - Comprehensive AI-powered relationship insights
class AdvancedAnalyticsDashboard extends StatefulWidget {
  final Contact contact;
  final List<ContactInteraction> interactions;

  const AdvancedAnalyticsDashboard({
    super.key,
    required this.contact,
    required this.interactions,
  });

  @override
  State<AdvancedAnalyticsDashboard> createState() =>
      _AdvancedAnalyticsDashboardState();
}

class _AdvancedAnalyticsDashboardState extends State<AdvancedAnalyticsDashboard>
    with TickerProviderStateMixin {
  late TabController _tabController;
  late PredictiveRelationshipAI _predictiveAI;

  RelationshipHealthPrediction? _healthPrediction;
  RelationshipWarning? _warning;
  OptimalContactTime? _optimalTime;
  List<ConversationStarter>? _starters;
  RelationshipForecast? _forecast;

  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 5, vsync: this);
    _initializeServices();
  }

  Future<void> _initializeServices() async {
    // HuggingFace disabled - using sample analytics only
    _loadAnalytics();
  }

  Future<void> _loadAnalytics() async {
    setState(() => _isLoading = true);

    try {
      // Load all AI analytics in parallel
      final results = await Future.wait([
        _predictiveAI.predictRelationshipHealth(
            widget.contact, widget.interactions),
        _predictiveAI.predictBestContactTime(
            widget.contact, widget.interactions),
        _predictiveAI.generatePersonalizedStarters(
            widget.contact, widget.interactions),
      ]);

      _healthPrediction = results[0] as RelationshipHealthPrediction;
      _optimalTime = results[1] as OptimalContactTime;
      _starters = results[2] as List<ConversationStarter>;

      _warning = _predictiveAI.detectRelationshipDrift(
          widget.contact, widget.interactions);
      _forecast = _predictiveAI.forecastRelationshipTrajectory(
          widget.contact, widget.interactions);
    } catch (e) {
      debugPrint('Analytics loading error: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('${widget.contact.displayName} - AI ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£'),
        backgroundColor: Colors.indigo.shade600,
        foregroundColor: Colors.white,
        bottom: TabBar(
          controller: _tabController,
          isScrollable: true,
          indicatorColor: Colors.white,
          tabs: const [
            Tab(icon: Icon(Icons.favorite), text: '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø'),
            Tab(icon: Icon(Icons.warning), text: '‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä'),
            Tab(icon: Icon(Icons.access_time), text: '‡§∏‡§Æ‡§Ø'),
            Tab(icon: Icon(Icons.chat), text: '‡§∏‡§Ç‡§¶‡•á‡§∂'),
            Tab(icon: Icon(Icons.trending_up), text: '‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø'),
          ],
        ),
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : TabBarView(
              controller: _tabController,
              children: [
                _buildHealthAnalysisTab(),
                _buildWarningTab(),
                _buildOptimalTimeTab(),
                _buildConversationStartersTab(),
                _buildForecastTab(),
              ],
            ),
    );
  }

  /// üíñ Relationship Health Analysis Tab
  Widget _buildHealthAnalysisTab() {
    if (_healthPrediction == null) {
      return const Center(child: Text('‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§æ'));
    }

    final health = _healthPrediction!;

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Overall Health Score
          _buildHealthScoreCard(health),
          const SizedBox(height: 20),

          // Health Trend Chart
          _buildHealthTrendChart(health),
          const SizedBox(height: 20),

          // Risk Factors
          _buildRiskFactorsCard(health),
          const SizedBox(height: 20),

          // Strengths
          _buildStrengthsCard(health),
          const SizedBox(height: 20),

          // Recommendations
          _buildRecommendationsCard(health),
        ],
      ),
    );
  }

  Widget _buildHealthScoreCard(RelationshipHealthPrediction health) {
    final score = health.overallHealthScore;
    final scorePercentage = (score * 100).round();

    Color scoreColor;
    String scoreText;
    IconData scoreIcon;

    if (score >= 0.8) {
      scoreColor = Colors.green;
      scoreText = '‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ';
      scoreIcon = Icons.favorite;
    } else if (score >= 0.6) {
      scoreColor = Colors.orange;
      scoreText = '‡§Ö‡§ö‡•ç‡§õ‡§æ';
      scoreIcon = Icons.favorite_border;
    } else if (score >= 0.4) {
      scoreColor = Colors.amber;
      scoreText = '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø';
      scoreIcon = Icons.sentiment_neutral;
    } else {
      scoreColor = Colors.red;
      scoreText = '‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç';
      scoreIcon = Icons.warning;
    }

    return Card(
      elevation: 8,
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          gradient: LinearGradient(
            colors: [
              scoreColor.withValues(alpha: 0.8),
              scoreColor.withValues(alpha: 0.4)
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Row(
          children: [
            // Score Circle
            SizedBox(
              width: 80,
              height: 80,
              child: Stack(
                children: [
                  CircularProgressIndicator(
                    value: score,
                    strokeWidth: 8,
                    backgroundColor: Colors.grey.shade300,
                    valueColor: AlwaysStoppedAnimation<Color>(scoreColor),
                  ),
                  Center(
                    child: Text(
                      '$scorePercentage%',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: scoreColor,
                      ),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(width: 20),

            // Score Info
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(scoreIcon, color: scoreColor, size: 24),
                      const SizedBox(width: 8),
                      Text(
                        '‡§∞‡§ø‡§∂‡•ç‡§§‡•á ‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø: $scoreText',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: scoreColor,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§∏‡•ç‡§§‡§∞: ${(health.confidenceLevel * 100).round()}%',
                    style: TextStyle(color: Colors.grey.shade600),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    '‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ: ${_formatDuration(health.timeToAction)}',
                    style: TextStyle(color: Colors.grey.shade600),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildHealthTrendChart(RelationshipHealthPrediction health) {
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'üìà ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡•Å‡§ù‡§æ‡§®',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            SizedBox(
              height: 200,
              child: LineChart(
                LineChartData(
                  gridData: const FlGridData(show: true),
                  titlesData: FlTitlesData(
                    leftTitles: AxisTitles(
                      sideTitles: SideTitles(
                        showTitles: true,
                        reservedSize: 40,
                        getTitlesWidget: (value, meta) => Text(
                          '${(value * 100).round()}%',
                          style: const TextStyle(fontSize: 12),
                        ),
                      ),
                    ),
                    bottomTitles: AxisTitles(
                      sideTitles: SideTitles(
                        showTitles: true,
                        getTitlesWidget: (value, meta) => Text(
                          '${value.toInt()}d',
                          style: const TextStyle(fontSize: 12),
                        ),
                      ),
                    ),
                    topTitles: const AxisTitles(
                        sideTitles: SideTitles(showTitles: false)),
                    rightTitles: const AxisTitles(
                        sideTitles: SideTitles(showTitles: false)),
                  ),
                  borderData: FlBorderData(show: true),
                  lineBarsData: [
                    LineChartBarData(
                      spots: _generateHealthTrendSpots(),
                      isCurved: true,
                      color: Colors.indigo,
                      barWidth: 3,
                      belowBarData: BarAreaData(
                        show: true,
                        color: Colors.indigo.withValues(alpha: 0.3),
                      ),
                      dotData: const FlDotData(show: true),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  List<FlSpot> _generateHealthTrendSpots() {
    // Generate sample trend data based on recent interactions
    final spots = <FlSpot>[];
    final interactions = widget.interactions.take(30).toList();

    for (int i = 0; i < interactions.length; i += 3) {
      final batch = interactions.skip(i).take(3).toList();
      final score = _calculateBatchHealthScore(batch);
      spots.add(FlSpot(i.toDouble(), score));
    }

    return spots.reversed.toList(); // Reverse to show chronological order
  }

  double _calculateBatchHealthScore(List<ContactInteraction> batch) {
    if (batch.isEmpty) return 0.5;

    // Simple scoring based on interaction patterns
    final myInitiations = batch.where((i) => i.initiatedByMe).length;
    final balance = 1.0 - (myInitiations / batch.length - 0.5).abs();

    return balance;
  }

  Widget _buildRiskFactorsCard(RelationshipHealthPrediction health) {
    if (health.riskFactors.isEmpty) {
      return const Card(
        elevation: 4,
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Row(
            children: [
              Icon(Icons.check_circle, color: Colors.green, size: 24),
              SizedBox(width: 12),
              Text(
                '‡§ï‡•ã‡§à ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§ï‡§æ‡§∞‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ üòä',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
              ),
            ],
          ),
        ),
      );
    }

    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(Icons.warning_amber, color: Colors.orange, size: 24),
                SizedBox(width: 8),
                Text(
                  '‚ö†Ô∏è ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§ï‡§æ‡§∞‡§ï',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            const SizedBox(height: 12),
            ...health.riskFactors.map((risk) => Padding(
                  padding: const EdgeInsets.symmetric(vertical: 4),
                  child: Row(
                    children: [
                      const Icon(Icons.circle, color: Colors.red, size: 8),
                      const SizedBox(width: 8),
                      Expanded(child: Text(risk)),
                    ],
                  ),
                )),
          ],
        ),
      ),
    );
  }

  Widget _buildStrengthsCard(RelationshipHealthPrediction health) {
    if (health.strengths.isEmpty) return Container();

    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(Icons.star, color: Colors.amber, size: 24),
                SizedBox(width: 8),
                Text(
                  '‚ú® ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§¨‡§ø‡§Ç‡§¶‡•Å',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            const SizedBox(height: 12),
            ...health.strengths.map((strength) => Padding(
                  padding: const EdgeInsets.symmetric(vertical: 4),
                  child: Row(
                    children: [
                      const Icon(Icons.circle, color: Colors.green, size: 8),
                      const SizedBox(width: 8),
                      Expanded(child: Text(strength)),
                    ],
                  ),
                )),
          ],
        ),
      ),
    );
  }

  Widget _buildRecommendationsCard(RelationshipHealthPrediction health) {
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(Icons.lightbulb, color: Colors.blue, size: 24),
                SizedBox(width: 8),
                Text(
                  'üí° ‡§∏‡•Å‡§ù‡§æ‡§µ',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            const SizedBox(height: 12),
            ...health.recommendations.map((recommendation) => Padding(
                  padding: const EdgeInsets.symmetric(vertical: 6),
                  child: Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.blue.shade50,
                      borderRadius: BorderRadius.circular(8),
                      border: Border(
                        left: BorderSide(
                          width: 4,
                          color: Colors.blue.shade300,
                        ),
                      ),
                    ),
                    child: Text(
                      recommendation,
                      style: const TextStyle(fontSize: 14),
                    ),
                  ),
                )),
          ],
        ),
      ),
    );
  }

  /// üö® Warning Tab
  Widget _buildWarningTab() {
    if (_warning == null) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.check_circle_outline, size: 64, color: Colors.green),
            SizedBox(height: 16),
            Text(
              '‚úÖ ‡§ï‡•ã‡§à ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§®‡§π‡•Ä‡§Ç',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 8),
            Text(
              '‡§∞‡§ø‡§∂‡•ç‡§§‡§æ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§π‡•à',
              style: TextStyle(fontSize: 16, color: Colors.grey),
            ),
          ],
        ),
      );
    }

    final warning = _warning!;

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          // Warning Header
          Card(
            color: _getWarningSeverityColor(warning.severity)
                .withValues(alpha: 0.1),
            elevation: 8,
            child: Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                children: [
                  Icon(
                    _getWarningIcon(warning.type),
                    size: 48,
                    color: _getWarningSeverityColor(warning.severity),
                  ),
                  const SizedBox(height: 12),
                  Text(
                    warning.message,
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: _getWarningSeverityColor(warning.severity),
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '‡§ó‡§Ç‡§≠‡•Ä‡§∞‡§§‡§æ: ${_getSeverityText(warning.severity)}',
                    style: TextStyle(color: Colors.grey.shade600),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 20),

          // Drift Indicators Chart
          _buildDriftIndicatorsChart(warning),
          const SizedBox(height: 20),

          // Suggested Actions
          _buildSuggestedActionsCard(warning),
        ],
      ),
    );
  }

  Widget _buildDriftIndicatorsChart(RelationshipWarning warning) {
    if (warning.driftIndicators.isEmpty) return Container();

    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'üìä ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§® ‡§∏‡§Ç‡§ï‡•á‡§§‡§ï',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            SizedBox(
              height: 200,
              child: BarChart(
                BarChartData(
                  alignment: BarChartAlignment.spaceAround,
                  barGroups: warning.driftIndicators.entries.map((entry) {
                    final index = warning.driftIndicators.keys
                        .toList()
                        .indexOf(entry.key);
                    return BarChartGroupData(
                      x: index,
                      barRods: [
                        BarChartRodData(
                          toY: entry.value,
                          color: _getDriftIndicatorColor(entry.value),
                          width: 20,
                          borderRadius: BorderRadius.circular(4),
                        ),
                      ],
                    );
                  }).toList(),
                  titlesData: FlTitlesData(
                    leftTitles: AxisTitles(
                      sideTitles: SideTitles(
                        showTitles: true,
                        reservedSize: 40,
                        getTitlesWidget: (value, meta) => Text(
                          value.toStringAsFixed(1),
                          style: const TextStyle(fontSize: 12),
                        ),
                      ),
                    ),
                    bottomTitles: AxisTitles(
                      sideTitles: SideTitles(
                        showTitles: true,
                        getTitlesWidget: (value, meta) {
                          final keys = warning.driftIndicators.keys.toList();
                          if (value.toInt() < keys.length) {
                            return Text(
                              _getIndicatorDisplayName(keys[value.toInt()]),
                              style: const TextStyle(fontSize: 10),
                            );
                          }
                          return const Text('');
                        },
                      ),
                    ),
                    topTitles: const AxisTitles(
                        sideTitles: SideTitles(showTitles: false)),
                    rightTitles: const AxisTitles(
                        sideTitles: SideTitles(showTitles: false)),
                  ),
                  borderData: FlBorderData(show: false),
                  gridData: const FlGridData(show: true),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSuggestedActionsCard(RelationshipWarning warning) {
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(Icons.build, color: Colors.blue, size: 24),
                SizedBox(width: 8),
                Text(
                  'üîß ‡§∏‡•Å‡§ù‡§æ‡§è ‡§ó‡§è ‡§ï‡§æ‡§∞‡•ç‡§Ø',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            const SizedBox(height: 12),
            ...warning.suggestedActions.map((action) => Padding(
                  padding: const EdgeInsets.symmetric(vertical: 6),
                  child: Row(
                    children: [
                      const Icon(Icons.arrow_forward_ios,
                          size: 16, color: Colors.blue),
                      const SizedBox(width: 8),
                      Expanded(
                          child: Text(action,
                              style: const TextStyle(fontSize: 14))),
                    ],
                  ),
                )),
          ],
        ),
      ),
    );
  }

  /// ‚è∞ Optimal Contact Time Tab
  Widget _buildOptimalTimeTab() {
    if (_optimalTime == null) {
      return const Center(child: Text('‡§∏‡§Æ‡§Ø ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§æ'));
    }

    final time = _optimalTime!;

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          // Best Hours Card
          Card(
            elevation: 4,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Row(
                    children: [
                      Icon(Icons.access_time, color: Colors.indigo, size: 24),
                      SizedBox(width: 8),
                      Text(
                        '‚è∞ ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Æ‡§Ø',
                        style: TextStyle(
                            fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  Wrap(
                    spacing: 8,
                    children: time.bestHours
                        .map((hour) => Chip(
                              label: Text('$hour:00'),
                              backgroundColor: Colors.indigo.shade100,
                            ))
                        .toList(),
                  ),
                  const SizedBox(height: 12),
                  Text(
                    time.reasoning,
                    style: TextStyle(color: Colors.grey.shade600),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 16),

          // Engagement Score
          Card(
            elevation: 4,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                children: [
                  CircularProgressIndicator(
                    value: time.engagementScore / 10, // Normalize to 0-1
                    strokeWidth: 8,
                    backgroundColor: Colors.grey.shade300,
                    valueColor:
                        const AlwaysStoppedAnimation<Color>(Colors.green),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          '‡§∏‡§π‡§≠‡§æ‡§ó‡§ø‡§§‡§æ ‡§∏‡•ç‡§ï‡•ã‡§∞',
                          style: TextStyle(
                              fontSize: 16, fontWeight: FontWeight.bold),
                        ),
                        Text(
                          '${time.engagementScore.toStringAsFixed(1)}/10',
                          style: TextStyle(color: Colors.grey.shade600),
                        ),
                        Text(
                          '‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏: ${(time.confidence * 100).round()}%',
                          style: TextStyle(
                              color: Colors.grey.shade600, fontSize: 12),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 16),

          // Next Suggested Contact
          Card(
            elevation: 4,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Row(
                    children: [
                      Icon(Icons.schedule, color: Colors.orange, size: 24),
                      SizedBox(width: 8),
                      Text(
                        'üìÖ ‡§Ö‡§ó‡§≤‡§æ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï',
                        style: TextStyle(
                            fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                  const SizedBox(height: 12),
                  Text(
                    _formatDateTime(time.nextSuggestedContact),
                    style: const TextStyle(
                        fontSize: 16, fontWeight: FontWeight.w500),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// üí¨ Conversation Starters Tab
  Widget _buildConversationStartersTab() {
    if (_starters == null || _starters!.isEmpty) {
      return const Center(child: Text('‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡•á'));
    }

    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _starters!.length,
      itemBuilder: (context, index) {
        final starter = _starters![index];
        return Card(
          elevation: 4,
          margin: const EdgeInsets.only(bottom: 12),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    _getCategoryIcon(starter.category),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        starter.text,
                        style: const TextStyle(
                            fontSize: 16, fontWeight: FontWeight.w500),
                      ),
                    ),
                    Container(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 8, vertical: 4),
                      decoration: BoxDecoration(
                        color: _getConfidenceColor(starter.confidence)
                            .withValues(alpha: 0.2),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Text(
                        '${(starter.confidence * 100).round()}%',
                        style: TextStyle(
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                          color: _getConfidenceColor(starter.confidence),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                Text(
                  starter.reasoning,
                  style: TextStyle(color: Colors.grey.shade600, fontSize: 12),
                ),
                const SizedBox(height: 12),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton.icon(
                      onPressed: () => _copyToClipboard(starter.text),
                      icon: const Icon(Icons.copy, size: 16),
                      label: const Text('‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç'),
                    ),
                    TextButton.icon(
                      onPressed: () => _sendMessage(starter.text),
                      icon: const Icon(Icons.send, size: 16),
                      label: const Text('‡§≠‡•á‡§ú‡•á‡§Ç'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  /// üîÆ Forecast Tab
  Widget _buildForecastTab() {
    if (_forecast == null) {
      return const Center(child: Text('‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§æ'));
    }

    final forecast = _forecast!;

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          // Current vs Projected Health
          Card(
            elevation: 4,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'üîÆ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 16),
                  Row(
                    children: [
                      Expanded(
                        child: _buildForecastIndicator(
                          '‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§®',
                          forecast.currentHealth,
                          Colors.blue,
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: _buildForecastIndicator(
                          '${forecast.forecastPeriod} ‡§¶‡§ø‡§® ‡§¨‡§æ‡§¶',
                          forecast.projectedHealth,
                          _getTrendColor(forecast.trend),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 16),

          // Trend Indicator
          Card(
            elevation: 4,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                children: [
                  Icon(
                    _getTrendIcon(forecast.trend),
                    color: _getTrendColor(forecast.trend),
                    size: 24,
                  ),
                  const SizedBox(width: 12),
                  Text(
                    '‡§∞‡•Å‡§ù‡§æ‡§®: ${_getTrendText(forecast.trend)}',
                    style: const TextStyle(
                        fontSize: 16, fontWeight: FontWeight.w500),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 16),

          // Potential Issues
          if (forecast.potentialIssues.isNotEmpty) ...[
            Card(
              elevation: 4,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Row(
                      children: [
                        Icon(Icons.warning, color: Colors.orange, size: 24),
                        SizedBox(width: 8),
                        Text(
                          '‚ö†Ô∏è ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç',
                          style: TextStyle(
                              fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    ...forecast.potentialIssues.map((issue) => Padding(
                          padding: const EdgeInsets.symmetric(vertical: 4),
                          child: Row(
                            children: [
                              const Icon(Icons.circle,
                                  color: Colors.orange, size: 8),
                              const SizedBox(width: 8),
                              Expanded(child: Text(issue)),
                            ],
                          ),
                        )),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
          ],

          // Milestones
          if (forecast.milestones.isNotEmpty) ...[
            Card(
              elevation: 4,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Row(
                      children: [
                        Icon(Icons.event, color: Colors.green, size: 24),
                        SizedBox(width: 8),
                        Text(
                          'üéâ ‡§Ü‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§Æ‡•Ä‡§≤ ‡§ï‡•á ‡§™‡§§‡•ç‡§•‡§∞',
                          style: TextStyle(
                              fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    ...forecast.milestones.map((milestone) => Padding(
                          padding: const EdgeInsets.symmetric(vertical: 4),
                          child: Row(
                            children: [
                              const Icon(Icons.circle,
                                  color: Colors.green, size: 8),
                              const SizedBox(width: 8),
                              Expanded(child: Text(milestone)),
                            ],
                          ),
                        )),
                  ],
                ),
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildForecastIndicator(String label, double value, Color color) {
    return Column(
      children: [
        Text(
          label,
          style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w500),
        ),
        const SizedBox(height: 8),
        SizedBox(
          width: 60,
          height: 60,
          child: Stack(
            children: [
              CircularProgressIndicator(
                value: value,
                strokeWidth: 6,
                backgroundColor: Colors.grey.shade300,
                valueColor: AlwaysStoppedAnimation<Color>(color),
              ),
              Center(
                child: Text(
                  '${(value * 100).round()}%',
                  style: TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                    color: color,
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  // Helper Methods
  String _formatDuration(Duration duration) {
    if (duration.inDays > 0) {
      return '${duration.inDays} ‡§¶‡§ø‡§®';
    } else if (duration.inHours > 0) {
      return '${duration.inHours} ‡§ò‡§Ç‡§ü‡•á';
    } else {
      return '${duration.inMinutes} ‡§Æ‡§ø‡§®‡§ü';
    }
  }

  String _formatDateTime(DateTime dateTime) {
    final now = DateTime.now();
    final difference = dateTime.difference(now);

    if (difference.inDays == 0) {
      return '‡§Ü‡§ú ${dateTime.hour}:${dateTime.minute.toString().padLeft(2, '0')} ‡§¨‡§ú‡•á';
    } else if (difference.inDays == 1) {
      return '‡§ï‡§≤ ${dateTime.hour}:${dateTime.minute.toString().padLeft(2, '0')} ‡§¨‡§ú‡•á';
    } else {
      return '${difference.inDays} ‡§¶‡§ø‡§® ‡§¨‡§æ‡§¶ ${dateTime.hour}:${dateTime.minute.toString().padLeft(2, '0')} ‡§¨‡§ú‡•á';
    }
  }

  Color _getWarningSeverityColor(WarningSeverity severity) {
    switch (severity) {
      case WarningSeverity.low:
        return Colors.yellow;
      case WarningSeverity.medium:
        return Colors.orange;
      case WarningSeverity.high:
        return Colors.red;
      case WarningSeverity.critical:
        return Colors.red.shade900;
    }
  }

  IconData _getWarningIcon(WarningType type) {
    switch (type) {
      case WarningType.sentimentDecline:
        return Icons.sentiment_dissatisfied;
      case WarningType.communicationDrop:
        return Icons.trending_down;
      case WarningType.responseDelay:
        return Icons.access_time;
      case WarningType.initiationImbalance:
        return Icons.balance;
      case WarningType.general:
        return Icons.warning;
    }
  }

  String _getSeverityText(WarningSeverity severity) {
    switch (severity) {
      case WarningSeverity.low:
        return '‡§ï‡§Æ';
      case WarningSeverity.medium:
        return '‡§Æ‡§ß‡•ç‡§Ø‡§Æ';
      case WarningSeverity.high:
        return '‡§â‡§ö‡•ç‡§ö';
      case WarningSeverity.critical:
        return '‡§ó‡§Ç‡§≠‡•Ä‡§∞';
    }
  }

  Color _getDriftIndicatorColor(double value) {
    if (value > 0.7) return Colors.red;
    if (value > 0.5) return Colors.orange;
    if (value > 0.3) return Colors.yellow;
    return Colors.green;
  }

  String _getIndicatorDisplayName(String key) {
    switch (key) {
      case 'frequency_decline':
        return '‡§Ü‡§µ‡•É‡§§‡•ç‡§§‡§ø';
      case 'response_delay':
        return '‡§ú‡§µ‡§æ‡§¨';
      case 'sentiment_decline':
        return '‡§≠‡§æ‡§µ‡§®‡§æ';
      case 'initiation_imbalance':
        return '‡§™‡§π‡§≤';
      default:
        return key;
    }
  }

  Widget _getCategoryIcon(ConversationCategory category) {
    switch (category) {
      case ConversationCategory.aiGenerated:
        return const Icon(Icons.psychology, color: Colors.purple, size: 20);
      case ConversationCategory.reconnection:
        return const Icon(Icons.refresh, color: Colors.blue, size: 20);
      case ConversationCategory.emotional:
        return const Icon(Icons.favorite, color: Colors.red, size: 20);
      case ConversationCategory.contextual:
        return const Icon(Icons.timeline, color: Colors.green, size: 20);
      case ConversationCategory.cultural:
        return const Icon(Icons.language, color: Colors.orange, size: 20);
    }
  }

  Color _getConfidenceColor(double confidence) {
    if (confidence > 0.8) return Colors.green;
    if (confidence > 0.6) return Colors.orange;
    return Colors.red;
  }

  Color _getTrendColor(RelationshipTrend trend) {
    switch (trend) {
      case RelationshipTrend.improving:
        return Colors.green;
      case RelationshipTrend.stable:
        return Colors.blue;
      case RelationshipTrend.declining:
        return Colors.red;
    }
  }

  IconData _getTrendIcon(RelationshipTrend trend) {
    switch (trend) {
      case RelationshipTrend.improving:
        return Icons.trending_up;
      case RelationshipTrend.stable:
        return Icons.trending_flat;
      case RelationshipTrend.declining:
        return Icons.trending_down;
    }
  }

  String _getTrendText(RelationshipTrend trend) {
    switch (trend) {
      case RelationshipTrend.improving:
        return '‡§∏‡•Å‡§ß‡§æ‡§∞';
      case RelationshipTrend.stable:
        return '‡§∏‡•ç‡§•‡§ø‡§∞';
      case RelationshipTrend.declining:
        return '‡§ó‡§ø‡§∞‡§æ‡§µ‡§ü';
    }
  }

  void _copyToClipboard(String text) {
    // Implement clipboard functionality
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ï‡•â‡§™‡•Ä ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ')),
    );
  }

  void _sendMessage(String text) {
    // Implement send message functionality
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•Ä ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§ú‡§≤‡•ç‡§¶ ‡§Ü‡§è‡§ó‡•Ä')),
    );
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }
}
